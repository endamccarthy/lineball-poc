// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum AccessLevel {
  USER
  ORGANISER
  ADMIN
  OWNER
}

enum FixtureType {
  GROUP
  KNOCKOUT
}

enum Result {
  TEAM_A_WIN
  TEAM_B_WIN
  DRAW
}

enum Sport {
  HURLING
  FOOTBALL
  SOCCER
  RUGBY
}

enum Platform {
  FACEBOOK
  INSTAGRAM
  TWITTER
}

// maybe no need for this table - use clerk public or private metadata instead
// set an accessLevel variable when they sign up
// change the accessLevel once their organisation is verifed
// the organisers stripe key can be stored there too
model Role {
  id          Int         @id @default(autoincrement())
  userId      String
  accessLevel AccessLevel @default(USER)

  organisations Organisation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@index([userId])
}

model Team {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)

  fixturesA          Fixture[]    @relation("teamA")
  fixturesB          Fixture[]    @relation("teamB")
  winningPredictions Prediction[] @relation("winningTeam")
  losingPredictions  Prediction[] @relation("losingTeam")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Competition {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(50)
  year  Int    @db.Year
  sport Sport

  fundraisers Fundraiser[]
  fixtures    Fixture[]
  groups      Group[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, year])
}

model Group {
  id          Int         @unique @default(autoincrement())
  name        String      @db.VarChar(50)
  competition Competition @relation(fields: [competitionId], references: [id])

  fixtures Fixture[]

  competitionId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, competitionId])
  @@index([competitionId])
}

model Fixture {
  id          Int         @unique @default(autoincrement())
  competition Competition @relation(fields: [competitionId], references: [id])
  type        FixtureType @default(GROUP)
  group       Group?      @relation(fields: [groupId], references: [id])
  round       String      @db.VarChar(30)
  teamA       Team?       @relation("teamA", fields: [teamAId], references: [id])
  teamB       Team?       @relation("teamB", fields: [teamBId], references: [id])
  result      Result?

  predictions Prediction[]

  teamAId       Int
  teamBId       Int
  competitionId Int
  groupId       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([competitionId, round, teamAId, teamBId])
  @@index([id])
  @@index([competitionId])
  @@index([teamBId])
  @@index([teamAId])
  @@index([groupId])
}

model Social {
  id       Int      @id @default(autoincrement())
  platform Platform
  handle   String   @db.VarChar(50)

  organisations Organisation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([platform, handle])
}

model Organisation {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  socials     Social[]
  roles       Role[]
  fundraisers Fundraiser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Fundraiser {
  id           Int          @id @default(autoincrement())
  organiserId  String
  verified     Boolean      @default(false)
  competition  Competition  @relation(fields: [competitionId], references: [id])
  organisation Organisation @relation(fields: [organisationId], references: [id])

  entries Entry[]
  prizes  Prize[]

  competitionId  Int
  organisationId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organiserId])
  @@index([competitionId])
  @@index([organisationId])
}

model Prize {
  id          Int    @id @default(autoincrement())
  place       Int    @db.TinyInt
  description String @db.VarChar(50)

  fundraiser Fundraiser @relation(fields: [fundraiserId], references: [id])

  fundraiserId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([place, fundraiserId])
  @@index([fundraiserId])
}

model Entry {
  id         Int        @id @default(autoincrement())
  userId     String
  fundraiser Fundraiser @relation(fields: [fundraiserId], references: [id])
  points     Int        @default(0)

  predictions Prediction[]

  fundraiserId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([fundraiserId])
}

model Prediction {
  id          Int     @id @default(autoincrement())
  entry       Entry   @relation(fields: [entryId], references: [id])
  fixture     Fixture @relation(fields: [fixtureId], references: [id])
  result      Result?
  winningTeam Team?   @relation("winningTeam", fields: [winningTeamId], references: [id])
  losingTeam  Team?   @relation("losingTeam", fields: [losingTeamId], references: [id])

  entryId       Int
  fixtureId     Int
  winningTeamId Int?
  losingTeamId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([entryId, fixtureId])
  @@index([entryId])
  @@index([fixtureId])
  @@index([winningTeamId])
  @@index([losingTeamId])
}
